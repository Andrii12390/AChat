generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChatRole {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id          String  @id @default(ulid())
  email       String  @unique
  username    String
  avatarColor String  @map("avatar_color")
  password    String?
  imageUrl    String? @map("image_url")
  isVerified  Boolean @default(false) @map("is_verified")

  chats        UserChat[]
  messages     Message[]
  readMessages ReadMessage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}

model Chat {
  id            String   @id @default(uuid())
  lastMessageAt DateTime @default(now()) @map("last_message_at")
  isGroup       Boolean  @default(false) @map("is_group")
  title         String?
  imageUrl      String?  @map("image_url")

  participants UserChat[]
  messages     Message[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}

model UserChat {
  userId String @map("user_id")
  chatId String @map("chat_id")

  role ChatRole @default(MEMBER)
  user User     @relation(fields: [userId], references: [id])
  chat Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@id([userId, chatId])
  @@map("user_chat")
}

model Message {
  id       String  @id @default(uuid())
  text     String?
  imageUrl String? @map("image_url")
  senderId String
  chatId   String  @map("chat_id")

  sender       User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat         Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  readMessages ReadMessage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}

model ReadMessage {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  messageId String   @map("message_id")
  readAt    DateTime @default(now()) @map("read_at")

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}
